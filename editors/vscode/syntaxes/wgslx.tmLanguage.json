{
  "name": "wgslx",
  "scopeName": "source.wgslx",
  "patterns": [
    {
      "include": "#line_comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#function_calls"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#types"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#strings"
    }
  ],
  "repository": {
    "line_comments": {
      "comment": "single line comment",
      "name": "comment.line.double-slash.wgslx",
      "match": "\\s*//.*"
    },
    "strings": {
      "patterns": [
        {
          "comment": "string",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.wgslx"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.wgslx"
            }
          },
          "name": "string.wgslx"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "comment": "function definition",
          "name": "meta.function.definition.wgslx",
          "begin": "\\b(fn)\\s+([A-Za-z0-9_]+)((\\()|(<))",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.fn.wgslx"
            },
            "2": {
              "name": "entity.name.function.wgslx"
            },
            "4": {
              "name": "punctuation.brackets.round.wgslx"
            }
          },
          "end": "\\{",
          "endCaptures": {
            "0": {
              "name": "punctuation.brackets.curly.wgslx"
            }
          },
          "patterns": [
            {
              "include": "#line_comments"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#function_calls"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#types"
            },
            {
              "include": "#variables"
            },
            {
              "include": "#punctuation"
            }
          ]
        }
      ]
    },
    "function_calls": {
      "patterns": [
        {
          "comment": "function/method calls",
          "name": "meta.function.call.wgslx",
          "begin": "([A-Za-z0-9_]+)(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.wgslx"
            },
            "2": {
              "name": "punctuation.brackets.round.wgslx"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.brackets.round.wgslx"
            }
          },
          "patterns": [
            {
              "include": "#line_comments"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#function_calls"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#types"
            },
            {
              "include": "#variables"
            },
            {
              "include": "#punctuation"
            }
          ]
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "comment": "decimal float literal",
          "name": "constant.numeric.float.wgslx",
          "match": "(-?\\b[0-9][0-9]*\\.[0-9][0-9]*)([eE][+-]?[0-9]+)?\\b"
        },
        {
          "comment": "int literal",
          "name": "constant.numeric.decimal.wgslx",
          "match": "-?\\b0x[0-9a-fA-F]+\\b|\\b0\\b|-?\\b[1-9][0-9]*\\b"
        },
        {
          "comment": "uint literal",
          "name": "constant.numeric.decimal.wgslx",
          "match": "\\b0x[0-9a-fA-F]+u\\b|\\b0u\\b|\\b[1-9][0-9]*u\\b"
        },
        {
          "comment": "boolean constant",
          "name": "constant.language.boolean.wgslx",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "types": {
      "comment": "types",
      "name": "storage.type.wgslx",
      "patterns": [
        {
          "comment": "scalar Types",
          "name": "storage.type.wgslx",
          "match": "\\b(bool|i32|u32|f32)\\b"
        },
        {
          "comment": "reserved scalar Types",
          "name": "storage.type.wgslx",
          "match": "\\b(i64|u64|f64)\\b"
        },
        {
          "comment": "vector/matrix types",
          "name": "storage.type.wgslx",
          "match": "\\b(vec[2-4]|mat[2-4]x[2-4])\\b"
        },
        {
          "comment": "atomic types",
          "name": "storage.type.wgslx",
          "match": "\\b(atomic)\\b"
        },
        {
          "comment": "array types",
          "name": "storage.type.wgslx",
          "match": "\\b(array)\\b"
        },
        {
          "comment": "Custom type",
          "name": "entity.name.type.wgslx",
          "match": "\\b([A-Z][A-Za-z0-9]*)\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "comment": "variables",
          "name": "variable.other.wgslx",
          "match": "\\b(?<!(?<!\\.)\\.)(?:r#(?!(crate|[Ss]elf|super)))?[a-z0-9_]+\\b"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "comment": "comma",
          "name": "punctuation.comma.wgslx",
          "match": ","
        },
        {
          "comment": "curly braces",
          "name": "punctuation.brackets.curly.wgslx",
          "match": "[{}]"
        },
        {
          "comment": "parentheses, round brackets",
          "name": "punctuation.brackets.round.wgslx",
          "match": "[()]"
        },
        {
          "comment": "semicolon",
          "name": "punctuation.semi.wgslx",
          "match": ";"
        },
        {
          "comment": "square brackets",
          "name": "punctuation.brackets.square.wgslx",
          "match": "[\\[\\]]"
        },
        {
          "comment": "angle brackets",
          "name": "punctuation.brackets.angle.wgslx",
          "match": "(?<!=)[<>]"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "comment": "other keywords",
          "name": "keyword.control.wgslx",
          "match": "\\b(bitcast|block|break|case|continue|continuing|default|discard|else|elseif|enable|fallthrough|for|function|if|loop|override|private|read|read_write|return|storage|switch|uniform|while|workgroup|write)\\b"
        },
        {
          "comment": "reserved keywords",
          "name": "keyword.control.wgslx",
          "match": "\\b(asm|const|do|enum|handle|mat|premerge|regardless|typedef|unless|using|vec|void)\\b"
        },
        {
          "comment": "storage keywords",
          "name": "keyword.other.wgslx storage.type.wgslx",
          "match": "\\b(let|var)\\b"
        },
        {
          "comment": "type keyword",
          "name": "keyword.declaration.type.wgslx storage.type.wgslx",
          "match": "\\b(type)\\b"
        },
        {
          "comment": "enum keyword",
          "name": "keyword.declaration.enum.wgslx storage.type.wgslx",
          "match": "\\b(enum)\\b"
        },
        {
          "comment": "struct keyword",
          "name": "keyword.declaration.struct.wgslx storage.type.wgslx",
          "match": "\\b(struct)\\b"
        },
        {
          "comment": "fn",
          "name": "keyword.other.fn.wgslx",
          "match": "\\bfn\\b"
        },
        {
          "comment": "logical operators",
          "name": "keyword.operator.logical.wgslx",
          "match": "(\\^|\\||\\|\\||&&|<<|>>|!)(?!=)"
        },
        {
          "comment": "logical AND, borrow references",
          "name": "keyword.operator.borrow.and.wgslx",
          "match": "&(?![&=])"
        },
        {
          "comment": "assignment operators",
          "name": "keyword.operator.assignment.wgslx",
          "match": "(\\+=|-=|\\*=|/=|%=|\\^=|&=|\\|=|<<=|>>=)"
        },
        {
          "comment": "single equal",
          "name": "keyword.operator.assignment.equal.wgslx",
          "match": "(?<![<>])=(?!=|>)"
        },
        {
          "comment": "comparison operators",
          "name": "keyword.operator.comparison.wgslx",
          "match": "(=(=)?(?!>)|!=|<=|(?<!=)>=)"
        },
        {
          "comment": "math operators",
          "name": "keyword.operator.math.wgslx",
          "match": "(([+%]|(\\*(?!\\w)))(?!=))|(-(?!>))|(/(?!/))"
        },
        {
          "comment": "dot access",
          "name": "keyword.operator.access.dot.wgslx",
          "match": "\\.(?!\\.)"
        },
        {
          "comment": "dashrocket, skinny arrow",
          "name": "keyword.operator.arrow.skinny.wgslx",
          "match": "->"
        }
      ]
    }
  }
}