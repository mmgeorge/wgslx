
// @import "types.wgslx"
// @import "constants.wgslx"

const RED = vec4f(1., 0., 0., 1.); 

@group(0) @binding(0) var<storage> transforms: array<mat4x4<f32>>;
@group(0) @binding(1) var<storage> transforms2: array<mat4x4<f32>>; 

struct Foo {
 foo: u32,
}; 

struct VertexInput {
  @builtin(vertex_index) index: u32, 
  @location(0) position: vec3f, 
};

struct VertexInput3 {
  @builtin(vertex_index) index: u32, 
  @location(0) position: vec3f, 
};

struct VertexOutput {
  @builtin(position) clip_position: vec4f
}; 

@vertex
fn vs_main(input: VertexInput) -> VertexOutput {
  var pos = array<vec2f, 3>
    (
     vec2(0.0, 0.5),
     vec2(-0.5, -0.5),
     vec2(0.5, -0.5)
    );
 
  var out: VertexOutput;

  out.clip_position = vec4f(pos[input.index], 0., 1.); 
  
  return out; 
}

@vertex
fn vs_main2(input: VertexInput) -> VertexOutput {
  var pos = array<vec2f, 3>
    (
     vec2(0.0, 0.5),
     vec2(-0.5, -0.5),
     vec2(0.5, -0.5)
    );
 
  var out: VertexOutput;

  out.clip_position = vec4f(pos[input.index], 0., 1.); 
  
  return out; 
}


@fragment
fn fs_main(input: VertexOutput) -> @location(0) vec4f {
  return transforms2[0][0] + transforms[0][0];
  // return RED; 
}
